/* Read scene element function.
 * ARGUMENTS: None.
 * RETURNS: 
 *   (parser_error) Parser error flag.
 */ 
template<typename Type>
  parser_error Read( VOID )
  {  
    Type Entry;
    std::string ErrorStr;

    if (!Entry.ReadFromStream(File, &ErrorStr))
    {
      error::msg(ErrorStr);
      return parser_error::error;
    }
    return parser_error::ok;
  } /* End of 'Read' function */

/* Parse block file functrion.
 * ARGUMENTS: None.
 * RETURNS:
 *   (parser_error) Error flag.
 */
parser_error ParseBlock( VOID )
{
  std::string BlockType;
  
  File >> BlockType;
  if (BlockType == "")
    return parser_error::end;
  if (BlockType == "material")
    return Read<material>();
  if (BlockType == "environment")
    return Read<envi>();
  if (BlockType == "sphere")
    return Read<sphere>();
  if (BlockType == "light_point")
    return Read<light_point>();
  if (BlockType == "scene")
    return Read<scene>();
  if (BlockType == "plane")
    return Read<plane>();
  error::msg("Unknown block");
  return parser_error::error;
} /* End of 'ParseBlock' function */

/* Read double value from stream function.
 * ARGUMENTS:
 *   - Pointer to value to read:
 *       DBL * const Val;
 *   - Stream to read from:
 *       std::iostream &Stream;
 * RETURNS:
 *   (BOOL) True if success;
 */
static BOOL ReadDBL( DBL * const Val, std::iostream &Stream )
{
  std::string TmpStr;

  Stream >> TmpStr;
  for (auto i : TmpStr)
    if (!isdigit(i) && i != '.' && i != '-')
      return FALSE;
  *Val = strtod(TmpStr.c_str(), nullptr);
  return TRUE;
} /* End of 'ReadDBL' function */

/* Read sphere from stream in ac1 format function.
     * ARGUMENTS:
     *   - Stream to read from:
     *       std::iostream &Stream;
     *   - Error string:
     *       std::string * const Error;
     * RETURNS:
     *   (BOOL) True if success;
     */
    BOOL sphere::ReadFromStream( std::iostream &Stream, std::string * const Error )
    {
      std::string Name, Param;

      auto SetError = [Error]( const std::string &Str ) -> BOOL
      {
        if (Error != nullptr)
          *Error = Str;
        return FALSE;
      };

      Stream >> Name;
      if (!isalpha(Name[0]))
        return SetError("Sphere name must beggins from letter!");
      while ((Stream >> Param, Param) != "!")
      {
        if (Param == "radius")
        {
          if (!parser::ReadDBL(&R, Stream))
            return SetError("Incorrect input of radius in sphere " + Name + " module");
          R2 = R * R;
        }
        else if (Param == "center")
        {
          if (!C.ReadFromStream(Stream))
            return SetError("Incorrect input of center in sphere " + Name + " module");
        }
        else if (Param == "material")
        {
          std::string Name;

          Stream >> Name;
          if ((Mtl = raytracer::Get().Materials.Get(Name)) == nullptr)
            return SetError("Material with name " + Name + " does not exist");
        }
        else if (Param == "environment")
        {
          std::string Name;

          Stream >> Name;
          if ((Envi = raytracer::Get().Environments.Get(Name)) == nullptr)
            return SetError("Environment with name " + Name + " does not exist");
        }
        else
          return SetError("Unknown sphere parameter in sphere " + Name + " module");
      }
      raytracer::Get().Spheres.Add(Name, *this);
      return TRUE;
    } /* End of 'ReadFromStream' function */

    /* Read plane from stream in ac1 format function.
     * ARGUMENTS:
     *   - Stream to read from:
     *       std::iostream &Stream;
     *   - Error string:
     *       std::string * const Error;
     * RETURNS:
     *   (BOOL) True if success;
     */
    BOOL plane::ReadFromStream( std::iostream &Stream, std::string * const Error )
    {
      std::string Name, Param;
      vec3 Pos = vec3(0);

      auto SetError = [Error]( const std::string &Str ) -> BOOL
      {
        if (Error != nullptr)
          *Error = Str;
        return FALSE;
      };

      Stream >> Name;
      if (!isalpha(Name[0]))
      {
        SetError("Sphere name must beggins from letter!");
        return FALSE;
      }
      while ((Stream >> Param, Param) != "!")
      {
        if (Param == "normal")
        {
          if (!N.ReadFromStream(Stream))
            return SetError("Incorrect input of radius in plane " + Name + " module");
        }
        else if (Param == "position")
        {
          if (!Pos.ReadFromStream(Stream))
            return SetError("Incorrect input of center in plane " + Name + " module");
        }
        else if (Param == "material")
        {
          std::string Name;

          Stream >> Name;
          if ((Mtl = raytracer::Get().Materials.Get(Name)) == nullptr)
            return SetError("Material with name " + Name + " does not exist");
        }
        else if (Param == "environment")
        {
          std::string Name;

          Stream >> Name;
          if ((Envi = raytracer::Get().Environments.Get(Name)) == nullptr)
            return SetError("Environment with name " + Name + " does not exist");
        }
        else
          return SetError("Unknown " + Param + " parameter in plane " + Name + " module");
      }
      D = (Pos & N);
      raytracer::Get().Planes.Add(Name, *this);
      return TRUE;
    } /* End of 'ReadFromStream' function */


      ///* Read vector from stream function. 
      // * ARGUMENTS:
      // *   - Stream to read from:
      // *       std::iostream &Stream;
      // *   - Error string:
      // *       std::string *Error;
      // */
      //BOOL ReadFromStream( std::iostream &Stream )
      //{
      //  std::string TmpStr;

      //  Stream >> TmpStr;
      //  for (auto i : TmpStr)
      //    if (!isdigit(i) && i != '.' && i != '-')
      //      return FALSE;
      //  X = (Type)strtod(TmpStr.c_str(), nullptr);
      //  Stream >> TmpStr;
      //  for (auto i : TmpStr)
      //    if (!isdigit(i) && i != '.' && i != '-')
      //      return FALSE;
      //  Y = (Type)strtod(TmpStr.c_str(), nullptr);
      //  Stream >> TmpStr;
      //  for (auto i : TmpStr)
      //    if (!isdigit(i) && i != '.' && i != '-')
      //      return FALSE;
      //  Z = (Type)strtod(TmpStr.c_str(), nullptr);
      //  return TRUE;
      //} /* End of 'ReadFromStream' function */

//#define ISZERO(A) (abs(A) < 0.001)
//#define LZERO(A) ((A) < -0.001)
//#define UZERO(A) ((A) > 0.001)
//
///* Complex number structire */
//struct cmpl
//{
//  DBL Re, Im;
//
//  /* Default class constructor */
//  cmpl( VOID ) :
//    Re(0), Im(0)
//  {
//  } /* End of 'cmpl' function */
//                    
//  /* Base class constructor */
//  cmpl( const DBL Re, const DBL Im = 0 ) :
//    Re(Re), Im(Im)
//  {
//  } /* End of 'cmpl' function */
//
//  /* Complex number module.
//   * ARGUMENTS: None.
//   * RETURNS: 
//   *   (DBL) Arg;
//   */
//  DBL arg( VOID )
//  {
//    return atan2(Im, Re);
//  } /* End of 'arg' function */
//
//  /* Complex number module.
//   * ARGUMENTS: None.
//   * RETURNS: 
//   *   (DBL) Mod;
//   */
//  DBL mod( VOID )
//  {
//    return sqrt(Re * Re + Im * Im);
//  } /* End of 'mod' function */
//
//  /* Complex square root function.
//   * ARGUMENTS: None.
//   * RETURNS: 
//   *   (cmpl) Root;
//   */
//  cmpl root( DBL NS, const INT I = 0 ) 
//  {
//    if (NS == 0)
//      NS = 1;
//    DBL N = pow(mod(), 1 / NS),
//      A = (arg() + I * (2.0 * 3.14159265)) / NS;
//
//    return cmpl((FLOAT)(N * cos(A)), (FLOAT)(N * sin(A)));
//  } /* End of 'sqrt' function */
//
//  /* Complex sum function.
//   * ARGUMENTS: None.
//   * RETURNS: 
//   *   (cmpl) Sum;
//   */
//  cmpl operator+( const cmpl& A )
//  {
//    return cmpl(Re + A.Re, Im + A.Im);
//  } /* End of 'operator+' function */
//
//  /* Complex sum function.
//   * ARGUMENTS: None.
//   * RETURNS: 
//   *   (cmpl) Sum;
//   */
//  cmpl operator-( const cmpl& A )
//  {
//    return cmpl(Re - A.Re, Im - A.Im);
//  } /* End of 'operator-' function */
//
//  /* Complex sum function.
//   * ARGUMENTS: None.
//   * RETURNS: 
//   *   (cmpl) Sum;
//   */
//  cmpl operator-( VOID )
//  {
//    return cmpl(-Re, -Im);
//  } /* End of 'operator+' function */
//
//  /* Complex div function.
//   * ARGUMENTS: None.
//   * RETURNS: 
//   *   (cmpl) Sum;
//   */
//  cmpl operator/( const DBL D )
//  {
//    if (D == 0)
//      return cmpl();
//    return cmpl(Re / D, Im / D);
//  } /* End of 'operator+' function */
//
//  /* Complex sum function.
//   * ARGUMENTS: None.
//   * RETURNS: 
//   *   (cmpl) Sum;
//   */
//  cmpl operator/( const cmpl& B )
//  {
//    DBL X = B.Re * B.Re + B.Im * B.Im;
//
//    return 
//      cmpl((Re * B.Re + Im * B.Im) / X, (Im * B.Re - Re * B.Im) / X);
//  } /* End of 'operator+' function */
//
//  /* Operator print to stream functiuon.
//   * ARGUMENTS:
//   *   - Out stream:
//   *       std::ostream &Stream;
//   * REETURNS:
//   *   (std::ostream &) reference to this stream;
//   */
//  std::ostream & operator<<( std::ostream &Stream )
//  {
//    return std::cout << Re <<  " " << Im;
//  } /* End of 'operator<<' function */
//
//  /* Convert function.
//   * ARGUMENTS: None.
//   * RETURNS: 
//   *   (DBL) Real part;
//   */
//  operator DBL( VOID )
//  {
//    return Re;  
//  } /* End of 'operator+' function */
//}; /* End of 'compl' struct */
//
///* Solutions struct */
//struct solutions
//{
//  INT NOS {};
//  DBL Sols[4] {};
//
//  /* Base constructor */
//  solutions( VOID )
//  {
//    NOS = 0;
//  } /* End of 'solutions' function */
//
//  /* Base constructor */
//  solutions( DBL A )
//  {
//    NOS = 1;
//    Sols[0] = A;
//  } /* End of 'solutions' function */
//
//  /* Base constructor */
//  solutions( DBL A, DBL B )
//  {
//    NOS = 2;
//    Sols[0] = A;
//    Sols[1] = B;
//  } /* End of 'solutions' function */
//
//  /* Base constructor */
//  solutions( DBL A, DBL B, DBL C )
//  {
//    NOS = 3;
//    Sols[0] = A;
//    Sols[1] = B;
//    Sols[2] = C;
//  } /* End of 'solutions' function */
//
//  /* Base constructor */
//  solutions( DBL A, DBL B, DBL C, DBL D )
//  {
//    NOS = 4;
//    Sols[0] = A;
//    Sols[1] = B;
//    Sols[2] = C;
//    Sols[3] = D;
//  } /* End of 'solutions' function */
//
//} /* End of 'solutions' struct */
//
///* Solve 2-power evaluation function.
// * ARGUMENTS:
// *   - koeficents:
// *       DBL a, DBL b, DBL c, DBL d;
// * RETURNS: 
// *   (solutions) all real solutions;
// */
//solutions Solve2( const DBL a, const DBL b, const DBL c )
//{
//  DBL D = b * b - 4 * a * c;
//
//  if (a == 0)
//  {
//    if (b == 0)
//      return solutions();
//    else
//      return solutions(-c / b);
//  }
//  if (D < 0)
//    return solutions();
//  if (D == 0)
//    return solutions(-b / (2 * a));
//  D = sqrt(D);
//  return solutions((-b + D) / (2 * a), (-b - D) / (2 * a));
//} /* End of 'Solve2' functios */
//
///* Solve 4-power evaluation function.
// * ARGUMENTS:
// *   - koeficents:
// *       DBL a, DBL b, DBL c, DBL d;
// * RETURNS: 
// *   (solutions) all real solutions;
// */
//solutions Solve3( DBL a, DBL b, DBL c, DBL d )
//{
//  if (ISZERO(a))
//    return Solve2(b, c, d);
//
//  DBL p((3 * a * c - b * b) / (3 * a * a) / 3), 
//    q((2 * b * b * b - 9 * a * b * c + 27 * a * a * d) / (27 * a * a * a) / 2);
//  DBL D(q * q + p * p * p), Delta = b / (3 * a);
//  //////// cmpl Tmp0(cmpl(-(q / 2.0)) + cmpl(D).root(2));
//
//  if (D == 0)
//  {
//    DBL Cb = cbrt(-q);
//
//    if (q == 0 && p == 0)
//      return solutions(-Delta);
//    return solutions(2 * Cb - Delta, -Cb - Delta);
//  }
//  else if (D > 0)
//  {
//    DBL Sc = sqrt(D);
//
//    return solutions(cbrt(-q + Sc) + cbrt(-q - Sc) - Delta);
//  }
//  DBL Fi, K = 2 * sqrt(-p),
//    Pi = 3.14159265359;
//
//  if (q == 0)
//    Fi = Pi / 2;
//  else
//  {
//    Fi = atan(-sqrt(-D) / q);
//    if (q > 0)
//      Fi += Pi;
//  }
//  Fi /= 3;
//  return solutions(K * cos(Fi) - Delta, 
//                   K * cos(Fi + (2 * Pi / 3)) - Delta, 
//                   K * cos(Fi + (4 * Pi / 3)) - Delta);
//} /* End of 'Solve3' functios */
//
///* Solve 4-power evaluation function.
// * ARGUMENTS:
// *   - koeficents:
// *       DBL a, DBL b, DBL c, DBL d, DBL e;
// * RETURNS: 
// *   (solutions) all real solutions;
// */
//solutions Solve4( DBL a, DBL b, DBL c, DBL d, DBL e )
//{
//  if (a == 0)
//    return Solve3(b, c, d, e);
//  {
//    DBL A = b / a, B = c / a, C = d / a, D = e / a;
//
//    a = A, b = B, c = C, d = D;
//  }
//
//  DBL p = b - 3 * a * a / 8,
//    q = a * a * a / 8 - a * b / 2  + c,
//    r = -3 * a * a * a * a / 256 + a * a * b / 16 - c * a / 4 + d;
//
//  solutions Sol = Solve3(2, -p, -2 * r, r * p - q * q / 4);
//  if (Sol.NOS == 0)
//    return solutions();
//  DBL s = Sol.Sols[0];
//  if (2 * s - p <= 0)
//    return solutions();
//  DBL t1 = sqrt(2 * s - p), t2 = q / (2 * t1);
//
//  INT k = (Sol = Solve2(1, -t1,  t2 + s)).NOS;
//  DBL Sols[4];
//
//  for (INT i = 0; i < Sol.NOS; i++)
//    Sols[i] = Sol.Sols[i];
//
//  Sol = Solve2(1,  t1, -t2 + s);
//  INT Total = k + Sol.NOS;
//  DBL Delta = a / 4;
//  for (INT i = 0; i < Sol.NOS; i++)
//    Sols[i + k] = Sol.Sols[i];
//  if (Total == 0)
//    return solutions();
//  if (Total == 1)
//    return solutions(Sols[0] - Delta);
//  if (Total == 2)
//    return solutions(Sols[0] - Delta, Sols[1] - Delta);
//  if (Total == 3)
//    return solutions(Sols[0] - Delta, Sols[1] - Delta, Sols[2] - Delta);
//  return 
//    solutions(Sols[0] - Delta, Sols[1] - Delta, Sols[2] - Delta, Sols[3] - Delta);
//} /* End of 'Solve4' functios */

/* END OF 'main.cpp' FILE */